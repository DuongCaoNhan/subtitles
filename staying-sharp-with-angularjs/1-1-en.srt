1
00:00:00,000 --> 00:00:03,980
[SINGING] 4:30 in the morning,
coding front-end on your site.

2
00:00:03,980 --> 00:00:07,200
Console errors warning â€”
you don't know how to fight.

3
00:00:07,200 --> 00:00:11,350
Reusable and flexible
directives are what you need.

4
00:00:11,350 --> 00:00:14,730
Link and scope are sensible
in reliant apps with speed.

5
00:00:14,730 --> 00:00:17,032
Services will be okay
to craft your own Note Wrangler.

6
00:00:17,032 --> 00:00:21,080
You are on your way to
Staying Sharp with Angular.

7
00:00:25,930 --> 00:00:26,470
Welcome.

8
00:00:26,470 --> 00:00:28,303
My name is Alyssa Nicoll
and you're watching

9
00:00:28,303 --> 00:00:30,360
Staying Sharp with Angular.js.

10
00:00:30,360 --> 00:00:34,630
In this course, we'll be
furthering our AngularJS skills.

11
00:00:34,630 --> 00:00:37,140
The app we're going to build
is called Note Wrangler,

12
00:00:37,140 --> 00:00:39,821
and it uses AngularJS to
create and manage notes.

13
00:00:39,821 --> 00:00:41,570
We'll be learning about
the route provider

14
00:00:41,570 --> 00:00:44,230
and how to create flexible
directives and services

15
00:00:44,230 --> 00:00:48,300
that will be reusable across
our Note Wrangler application.

16
00:00:48,300 --> 00:00:49,827
Let's get started with routes.

17
00:00:49,827 --> 00:00:52,160
In this first section, we're
going to be wiring together

18
00:00:52,160 --> 00:00:55,000
our views.

19
00:00:55,000 --> 00:00:57,470
We want to start this
AngularJS app from ground zero

20
00:00:57,470 --> 00:01:01,010
so that you guys can see the
process as we go through it.

21
00:01:01,010 --> 00:01:04,450
Here you can see we have all of
these static HTML and CSS files

22
00:01:04,450 --> 00:01:06,210
from our designer.

23
00:01:06,210 --> 00:01:09,660
Our goal now is to take this
and build it into a living

24
00:01:09,660 --> 00:01:12,670
and breathing AngularJS app.

25
00:01:12,670 --> 00:01:15,130
To get started, we're going to
create a few new directories

26
00:01:15,130 --> 00:01:16,860
to organize our code.

27
00:01:16,860 --> 00:01:19,200
Out in the wild, you might
see some applications

28
00:01:19,200 --> 00:01:21,630
that put all of their
controllers and services

29
00:01:21,630 --> 00:01:23,390
in one massive file.

30
00:01:23,390 --> 00:01:26,700
We think it's best to
encapsulate each controller,

31
00:01:26,700 --> 00:01:29,949
service, filter, or
directive into their own file

32
00:01:29,949 --> 00:01:31,365
and give them their
own directory.

33
00:01:34,370 --> 00:01:36,450
Inside our controllers
directory you'll

34
00:01:36,450 --> 00:01:39,510
see that we have a separate
file for each controller.

35
00:01:39,510 --> 00:01:43,280
So for notes index,
edit, show, et cetera,

36
00:01:43,280 --> 00:01:47,070
each one gets their own file.

37
00:01:47,070 --> 00:01:49,240
Now let's look at the HTML.

38
00:01:49,240 --> 00:01:52,670
In the notes-index.html
and users-index.html,

39
00:01:52,670 --> 00:01:54,270
there's a lot of redundancy.

40
00:01:54,270 --> 00:01:57,920
They both start with the HTML
tag and end with HTML tag.

41
00:01:57,920 --> 00:01:59,420
Let's take a look
inside those files

42
00:01:59,420 --> 00:02:02,090
and see what's
actually repeated.

43
00:02:02,090 --> 00:02:03,920
Here's the notes index.

44
00:02:03,920 --> 00:02:08,389
As you can see, there's quite a
bit of code that's duplicated.

45
00:02:08,389 --> 00:02:12,100
The only unique code
that exists is inside

46
00:02:12,100 --> 00:02:16,030
the div that has the
class of main-wrapper.

47
00:02:16,030 --> 00:02:19,620
If we go ahead and bring our
users index onto the screen,

48
00:02:19,620 --> 00:02:21,780
you can see that
inside of that div,

49
00:02:21,780 --> 00:02:24,480
called main-wrapper
as well, is the only

50
00:02:24,480 --> 00:02:27,090
unique chunk of code for users.

51
00:02:27,090 --> 00:02:29,790
So what we're going to do
is take those two pieces

52
00:02:29,790 --> 00:02:32,430
of unique code and
separate them out

53
00:02:32,430 --> 00:02:33,985
into their own template files.

54
00:02:36,720 --> 00:02:40,180
We're going to place these
files into their own templates

55
00:02:40,180 --> 00:02:43,790
directory with a pages
directory inside of that

56
00:02:43,790 --> 00:02:47,600
and then a notes or users
directory inside of that.

57
00:02:47,600 --> 00:02:49,180
But you might
notice there's still

58
00:02:49,180 --> 00:02:51,310
some duplication going on.

59
00:02:51,310 --> 00:02:54,940
Having a notes index file
inside a notes directory

60
00:02:54,940 --> 00:02:58,600
is a little redundant, so we can
go ahead and remove the notes

61
00:02:58,600 --> 00:03:01,410
or users prefix
off of those files

62
00:03:01,410 --> 00:03:03,487
since they live inside
of their own directory

63
00:03:03,487 --> 00:03:04,820
that tells you that information.

64
00:03:07,860 --> 00:03:10,150
Remember all of that
duplicate HTML code

65
00:03:10,150 --> 00:03:12,190
that we just pushed
to the side earlier?

66
00:03:12,190 --> 00:03:15,270
Well, now we're going to take
it and just have one copy of it

67
00:03:15,270 --> 00:03:17,610
in our main index file.

68
00:03:17,610 --> 00:03:20,750
And then at the very top in
the HTML tag, you guessed it,

69
00:03:20,750 --> 00:03:23,590
we're going to have an
ng-app attribute that labels

70
00:03:23,590 --> 00:03:26,350
our application Note Wrangler.

71
00:03:26,350 --> 00:03:28,400
Inside of our main-wrapper
you can also

72
00:03:28,400 --> 00:03:30,240
see that it's empty
because that's

73
00:03:30,240 --> 00:03:32,590
where our unique content
was removed from.

74
00:03:35,380 --> 00:03:37,740
If we open our application
in the web browser,

75
00:03:37,740 --> 00:03:40,780
you can see that our main
layout from the index file

76
00:03:40,780 --> 00:03:42,970
is being loaded in,
which is awesome,

77
00:03:42,970 --> 00:03:45,630
but nothing else is displaying.

78
00:03:45,630 --> 00:03:49,670
So if we go to the URL
with /notes at the end,

79
00:03:49,670 --> 00:03:51,160
what do we expect to happen?

80
00:03:51,160 --> 00:03:53,770
Well, I would anticipate
a list of notes

81
00:03:53,770 --> 00:03:56,030
being shown, the note index.

82
00:03:56,030 --> 00:04:00,820
But how do we include that
template in this spot?

83
00:04:00,820 --> 00:04:03,930
We can include that template
by simply defining an AngularJS

84
00:04:03,930 --> 00:04:04,890
route.

85
00:04:04,890 --> 00:04:08,710
AngularJS is going to
look at the /notes URL,

86
00:04:08,710 --> 00:04:13,910
look into the routes.js file,
and find what template it needs

87
00:04:13,910 --> 00:04:14,940
to include.

88
00:04:14,940 --> 00:04:16,764
In this case, that's
the notes index.

89
00:04:19,750 --> 00:04:22,360
There are four steps to
using routing in any AngularJS

90
00:04:22,360 --> 00:04:23,380
application.

91
00:04:23,380 --> 00:04:25,020
Let's go ahead and
list them out now.

92
00:04:25,020 --> 00:04:27,450
First you're going
to use ngView.

93
00:04:27,450 --> 00:04:30,660
Then you'll load
the ngRoute library.

94
00:04:30,660 --> 00:04:33,560
Third, you're going to
import ngRoute module.

95
00:04:33,560 --> 00:04:37,420
And then last, you get to
define the actual route itself.

96
00:04:37,420 --> 00:04:41,990
Let's go ahead and implement
each of these steps together.

97
00:04:41,990 --> 00:04:46,160
So the first step to routing happiness: ngView.

98
00:04:46,160 --> 00:04:48,280
You need to use the ngView attribute

99
00:04:48,280 --> 00:04:52,320
where you want to tell AngularJS, "Load in the template here."

100
00:04:52,320 --> 00:04:55,780
In our case, that would be inside the div main-wrapper

101
00:04:55,780 --> 00:04:57,560
where we took out the unique code.

102
00:05:03,200 --> 00:05:06,290
The next step, loading
the ngRoute library,

103
00:05:06,290 --> 00:05:09,200
used to not always be required.

104
00:05:09,200 --> 00:05:11,670
The route library used to be
a part of the AngularJS core.

105
00:05:11,670 --> 00:05:15,150
But in order to slim down, they
stripped that out and now we

106
00:05:15,150 --> 00:05:18,330
have to include it in our app
if we want to use routes.

107
00:05:18,330 --> 00:05:20,710
So here, in our main
index file, we're

108
00:05:20,710 --> 00:05:25,090
going to include the script to
our js/vendor/angular-route

109
00:05:25,090 --> 00:05:25,590
file.

110
00:05:28,320 --> 00:05:29,730
Now that we've
loaded ngRoute, we

111
00:05:29,730 --> 00:05:32,140
can include it in our
main application module.

112
00:05:32,140 --> 00:05:36,130
We'll create an app.js
file, declare angular.module

113
00:05:36,130 --> 00:05:38,860
name it NoteWrangler,
and go ahead and include

114
00:05:38,860 --> 00:05:41,270
our ngRoute dependency here.

115
00:05:41,270 --> 00:05:45,090
Now we can start declaring our
routes in a routes.js file.

116
00:05:45,090 --> 00:05:47,640
We'll say angular.module
NoteWrangler again

117
00:05:47,640 --> 00:05:50,240
at the top of the file,
and then in the application's

118
00:05:50,240 --> 00:05:54,330
config function, we'll
include route provider.

119
00:05:54,330 --> 00:05:56,310
This will allow us to
specify our routes.

120
00:05:59,830 --> 00:06:01,330
You might be wondering
why we're not

121
00:06:01,330 --> 00:06:05,710
creating an app variable like we
did in Shaping up with AngularJS.

122
00:06:05,710 --> 00:06:09,430
We said var app
equals angular.module,

123
00:06:09,430 --> 00:06:12,110
and then we reused that
application variable

124
00:06:12,110 --> 00:06:15,250
over and over again any time
we wanted to attach something

125
00:06:15,250 --> 00:06:17,110
to our application module.

126
00:06:17,110 --> 00:06:18,900
This is a bad
practice for reasons

127
00:06:18,900 --> 00:06:21,210
that we're not going to
get into in this course,

128
00:06:21,210 --> 00:06:25,190
but just note that re-declaring
angular.module each time is

129
00:06:25,190 --> 00:06:26,900
better.

130
00:06:26,900 --> 00:06:29,510
Finally, the moment you've
all been waiting for.

131
00:06:29,510 --> 00:06:31,940
We actually get
to define a route.

132
00:06:31,940 --> 00:06:35,150
So with that route provider
that we just got access to

133
00:06:35,150 --> 00:06:38,040
we have a couple of methods
that we're going to use.

134
00:06:38,040 --> 00:06:41,690
There is .when, which will
allow you to add a new route

135
00:06:41,690 --> 00:06:43,980
definition to the route service.

136
00:06:43,980 --> 00:06:46,650
And there's .otherwise.

137
00:06:46,650 --> 00:06:49,240
This method will allow
us to define a route

138
00:06:49,240 --> 00:06:52,970
when no other route is matched.

139
00:06:52,970 --> 00:06:55,440
Now we get to define
our first route.

140
00:06:55,440 --> 00:06:58,380
We're going to say
routeProvider.when,

141
00:06:58,380 --> 00:07:02,760
and then pass in the path,
which, in this case, is /notes.

142
00:07:02,760 --> 00:07:04,660
Next, we specify
the template that we

143
00:07:04,660 --> 00:07:07,850
want to load in by
passing in an object

144
00:07:07,850 --> 00:07:11,450
with a template URL
property and the path

145
00:07:11,450 --> 00:07:15,000
to the template as the value.

146
00:07:15,000 --> 00:07:18,850
Now when we go back to
our application to /notes,

147
00:07:18,850 --> 00:07:21,310
you can see that all the
notes are being loaded in with

148
00:07:21,310 --> 00:07:24,930
the notes index template.

149
00:07:24,930 --> 00:07:27,500
Next, we're going to
define our users route.

150
00:07:27,500 --> 00:07:32,760
So when /users is visited, we
want the users index template

151
00:07:32,760 --> 00:07:33,980
to be loaded in.

152
00:07:33,980 --> 00:07:36,730
Notice we're not re-declaring
route provider each time.

153
00:07:36,730 --> 00:07:39,100
We're just chaining on
the when methods as we go.

154
00:07:41,660 --> 00:07:44,530
If we go /users in
our Note Wrangler app,

155
00:07:44,530 --> 00:07:49,430
you can see now that all of
the users are being loaded in.

156
00:07:49,430 --> 00:07:52,750
When you go to the root of
our application, simply /,

157
00:07:52,750 --> 00:07:54,477
you'll see that it's just our layout.

158
00:07:54,477 --> 00:07:55,810
Nothing else is being displayed.

159
00:07:59,270 --> 00:08:02,650
So we can go ahead and declare
another .when method and say

160
00:08:02,650 --> 00:08:06,640
when / load in the template
URL for the notes index.

161
00:08:09,410 --> 00:08:12,300
The last route that we're going
to declare in this section

162
00:08:12,300 --> 00:08:13,910
is a catch-all route.

163
00:08:13,910 --> 00:08:18,640
It's basically saying,
"If nothing else matches, do this."

164
00:08:18,640 --> 00:08:21,770
So we're going to use
our .otherwise method

165
00:08:21,770 --> 00:08:23,310
that we talked about earlier.

166
00:08:23,310 --> 00:08:26,290
We'll simply say .otherwise.

167
00:08:26,290 --> 00:08:30,560
And then we'll
redirect to the root.

168
00:08:30,560 --> 00:08:32,460
If we head on back
over to the browser,

169
00:08:32,460 --> 00:08:35,730
you can see that our templates
are wired up now and working

170
00:08:35,730 --> 00:08:37,049
with the navigation.

171
00:08:37,049 --> 00:08:40,350
If we click on Users,
the Users page loads in

172
00:08:40,350 --> 00:08:41,580
and they're all listed out.

173
00:08:41,580 --> 00:08:42,909
Click on Notes.

174
00:08:42,909 --> 00:08:45,410
The notes index
template comes in.

175
00:08:45,410 --> 00:08:47,570
And then if we go
to the root, you

176
00:08:47,570 --> 00:08:52,460
can see that also the notes
are being loaded in there.

177
00:08:52,460 --> 00:08:54,760
If you look closely
at the URL, you

178
00:08:54,760 --> 00:08:59,010
might be wondering why I have
app-level-1 in my path.

179
00:08:59,010 --> 00:09:02,370
Well, you can't just
open an index file

180
00:09:02,370 --> 00:09:05,710
for an AngularJS application and
expect it to work statically.

181
00:09:05,710 --> 00:09:08,400
You need something on the
back-end to serve it up.

182
00:09:08,400 --> 00:09:11,020
Sometimes people will use
Brackets, an application

183
00:09:11,020 --> 00:09:12,520
that does this for you.

184
00:09:12,520 --> 00:09:14,340
Other people will use Node.

185
00:09:14,340 --> 00:09:17,960
I personally used Rails here
and put all of the levels

186
00:09:17,960 --> 00:09:20,460
inside of one public folder.

187
00:09:20,460 --> 00:09:23,470
So now if I change to
Level 2, 3, 4,

188
00:09:23,470 --> 00:09:27,390
you can see the app in
its different states.

189
00:09:27,390 --> 00:09:29,520
I'll provide you the link
at the end of the course

190
00:09:29,520 --> 00:09:32,850
so that you can go and download
all of those if you would like.

191
00:09:32,850 --> 00:09:35,160
Let's get started on challenges.

192
00:09:35,160 --> 00:09:37,068
